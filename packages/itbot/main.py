import asyncio
import logging
import os
import random
import re
from typing import Dict, List
from telethon import events
from packages.itbot.agents.agent_001 import Agent001
from packages.itbot.itbot import Signal
from packages.itbot.itbot.mt5_trader import MT5Trader
from packages.itbot.itbot.interfaces import TelegramInterface
from trade_flow.common.logging import Logger
from dotenv import load_dotenv

load_dotenv()

random.seed(248)


class ITBot:
    """
    ITBot Class for managing trading signals and executing trades using MetaTrader 5.

    Attributes:
        phone_number (str): Telegram account's phone number.
        api_id (str): Telegram API ID.
        api_hash (str): Telegram API Hash.
        mt5_account_number (str): MetaTrader 5 account number.
        mt5_password (str): MetaTrader 5 account password.
        mt5_server (str): MetaTrader 5 server address.
        trader (MT5Trader): MetaTrader 5 trader instance.
        logger (Logger): Logger instance.
        telegram (TelegramListener): Instance of the Telegram listener.
    """

    def __init__(self):
        self.phone_number = os.getenv("PHONE_NUMBER")
        self.api_id = os.getenv("API_ID")
        self.api_hash = os.getenv("API_HASH")
        self.mt5_account_number = os.getenv("MT5_ACCOUNT_NUMBER")
        self.mt5_password = os.getenv("MT5_PASSWORD")
        self.mt5_server = os.getenv("MT5_SERVER")

        # Default Telegram chat channels to listen to
        self.default_chats = ["intelligent_trading_signals"]

        # Set up logging
        self.logger = Logger(name="it_bot", log_level=logging.DEBUG, filename="ITBot.log")

        # Set up MetaTrader 5 terminal trader
        self.trader = MT5Trader(
            account_number=self.mt5_account_number,
            password=self.mt5_password,
            server=self.mt5_server,
            logger=self.logger,
        )

        # Initialize Telegram bot
        self.telegram = TelegramInterface(
            phone_number=self.phone_number,
            api_id=self.api_id,
            api_hash=self.api_hash,
            logger=self.logger,
        )

        # Initialize Agent001 instance
        self.agent = Agent001(logger=self.logger)

    def _parse_telegram_signals(self, data: str) -> List[Signal]:
        """
        Parse signals (trading data) from telegram to extract price, score, trend direction, and zone classification.

        Args:
            data (str): Raw trading data as a string.

        Returns:
            List[Signal]: Parsed trading data as a list of Signal objects.
        """
        if "₿" not in data:
            return []

        pattern = re.compile(
            r"₿ (?P<price>[\d,]+) Score: (?P<score>[-+]\d+\.\d{2})\s*(?P<trend>↑)?\s*(?P<zone>[\w\s]+)?"
        )

        signals = []
        for match in pattern.finditer(data):
            # Create a Signal object using the parsed data
            signal = Signal(
                symbol="BTCUSD",
                price=float(match.group("price").replace(",", "")) if match.group("price") else 0.0,
                score=float(match.group("score")) if match.group("score") else 0.0,
                trend=match.group("trend") or "None",
                zone=match.group("zone") or "None",
                trade_type=(
                    match.group("zone").upper().split("ZONE")[0].strip()
                    if match.group("zone")
                    else "None"
                ),
            )
            signals.append(signal)

        return signals

    async def handle_new_message(self, event: events.NewMessage) -> None:
        """
        Handle new messages received from Telegram channels.

        Args:
            event (events.NewMessage): The Telegram message event object.
        """
        # Extract the message text
        message = event.message
        text = f"{message.message}"

        # Extract channel information
        try:
            entity = await self.telegram.client.get_entity(message.peer_id.channel_id)
        except AttributeError:
            entity = await self.telegram.client.get_entity(message.peer_id)

        self.logger.debug(f"Received event from {entity.username} with message:\n" + text)

        if "ZONE" in text:
            # Parse the message text for trading signals
            signals = self._parse_telegram_signals(text)
            self.logger.debug(f"Processed signals: {signals}")
            if len(signals) > 0:
                for signal in signals:
                    await self.trader.execute_trade(signal)

    async def process_agent_signals(self, signal: Signal) -> None:
        """
        Process the signals generated by the agent and execute the trade in MetaTrader 5.

        Args:
            signal (Signal): Trading signal generated by the agent.
        """
        self.logger.debug(f"Processing signal: {signal}")
        await self.trader.execute_trade(signal, "martingale")

    async def run_agent(self):
        """
        Runs the agent in a loop, generating signals and sending them to ITBot.
        """
        self.logger.debug("Starting Agent")
        # Load model for the agent (modify path as needed)
        self.agent.load_model(f"{os.getcwd()}/models/001.model")

        while True:
            # Dummy data passed to agent for signal generation
            data = {"price": 50000, "score": 0.4}

            # Generate signals from the agent
            signals = await self.agent.generate_signals(data)

            # Process each signal and forward it to MT5 for execution
            for signal in signals:
                await self.process_agent_signals(signal)
                # await self.telegram.send_message("@G_ojies", signal.__str__())
                await asyncio.sleep(5)

    def run(self):
        """
        Start the bot
        """
        self.logger.info("Starting ITBot...")
        # Start Telegram client
        self.telegram.start_client()

        # Add message handler to the listener
        channel_entities = [
            f"https://t.me/{chat}" for chat in self.default_chats if "@" not in chat
        ]
        self.telegram.add_message_handler(channel_entities, self.handle_new_message)

        # Run Telegram listener and agent
        loop = asyncio.get_event_loop()

        # Create tasks for both the agent and the Telegram listener
        loop.create_task(self.run_agent())  # Start the agent in the event loop
        loop.create_task(self.telegram.run())  # Start the Telegram listener

        # Keep the event loop running
        loop.run_forever()


if __name__ == "__main__":
    it_bot = ITBot()
    it_bot.run()
