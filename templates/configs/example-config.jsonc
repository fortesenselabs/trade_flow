{
  "api_key": "",
  "api_secret": "",
  "mt_directory_path": "/Metatrader5[Test]/MQL5/Files",

  "telegram_bot_token": "",
  "telegram_chat_id": "",

  "data_folder": "data",
  "models_folder": "models",
  "merge_file_name": "data.csv",
  "feature_file_name": "features.csv",
  "matrix_file_name": "matrix.csv",
  "predict_file_name": "predictions.csv",
  "signal_file_name": "signals.csv",
  "signal_models_file_name": "signal_models",

  // === DOWNLOAD AND MERGE ===

  "symbol": "Step Index",

  "freq": "1min", // pandas frequency

  "data_sources": [
    { "folder": "Step Index", "file": "klines", "column_prefix": "" }
  ],

  "time_column": "timestamp",

  // === GENERATE FEATURES ===

  "feature_sets": [
    {
      "column_prefix": "",
      "generator": "talib",
      "feature_prefix": "",
      "config": {
        "columns": ["close"],
        "functions": ["SMA"],
        "windows": [1, 5, 10, 15, 60]
      }
    },
    {
      "column_prefix": "",
      "generator": "talib",
      "feature_prefix": "",
      "config": {
        "columns": ["close"],
        "functions": ["LINEARREG_SLOPE"],
        "windows": [5, 10, 15, 60]
      }
    },
    {
      "column_prefix": "",
      "generator": "talib",
      "feature_prefix": "",
      "config": {
        "columns": ["close"],
        "functions": ["STDDEV"],
        "windows": [5, 10, 15, 60]
      }
    },
    {
      "column_prefix": "",
      "generator": "talib",
      "feature_prefix": "",
      "config": {
        "columns": ["close"],
        "functions": ["RSI"],
        "windows": [5, 10, 14, 15, 30]
      }
    }
  ],

  // === LABELS ===

  "label_sets": [
    {
      "column_prefix": "",
      "generator": "highlow2",
      "feature_prefix": "",
      "config": {
        "columns": ["close", "high", "low"],
        "function": "high",
        "thresholds": [0.01],
        "tolerance": 0.1,
        "horizon": 120,
        "names": ["high_0.1"]
      }
    },
    {
      "column_prefix": "",
      "generator": "highlow2",
      "feature_prefix": "",
      "config": {
        "columns": ["close", "high", "low"],
        "function": "low",
        "thresholds": [0.01],
        "tolerance": 0.1,
        "horizon": 120,
        "names": ["low_0.1"]
      }
    }
  ],

  // === TRAIN ===

  "label_horizon": 120, // Batch/offline: do not use these last rows because their labels might not be correct
  "train_length": 525600, // Batch/offline: Uses this number of rows for training (if not additionally limited by the algorithm)

  "train_feature_sets": [
    {
      "generator": "train_features",
      "config": {
        // Use values from the attributes: train_features, labels, algorithms
      }
    }
  ],

  "train_features": [
    "close_SMA_1",
    "close_SMA_5",
    "close_SMA_10",
    "close_SMA_15",
    "close_SMA_60",
    "close_LINEARREG_SLOPE_5",
    "close_LINEARREG_SLOPE_10",
    "close_LINEARREG_SLOPE_15",
    "close_LINEARREG_SLOPE_60",
    "close_STDDEV_5",
    "close_STDDEV_10",
    "close_STDDEV_15",
    "close_STDDEV_60",
    "close_RSI_5",
    "close_RSI_10",
    "close_RSI_14",
    "close_RSI_15",
    "close_RSI_30"
  ],

  "labels": ["high_0.1", "low_0.1"],

  "algorithms": [
    {
      "name": "lc", // Unique name will be used as a column suffix
      "algo": "lc", // Algorithm type is used to choose the train/predict function
      "params": {
        "penalty": "l2",
        "C": 0.5,
        "class_weight": "balanced",
        "solver": "sag",
        "max_iter": 100
      },
      "train": { "is_scale": true, "length": 1000000, "shifts": [] },
      "predict": { "length": 1440 }
    },
    {
      "name": "gb", // Unique name will be used as a column suffix
      "algo": "gb", // Algorithm type is used to choose the train/predict function
      "params": {
        "objective": "binary", // Specify the objective function (e.g., "binary" for classification, "regression" for regression)
        "max_depth": 15, // Maximum depth of individual trees in the ensemble (controls model complexity)
        "learning_rate": 0.1, // Step size for weight updates during training (smaller = slower training, can prevent overfitting)
        "num_boost_round": 200, // Number of boosting iterations (trees to grow)
        "lambda_l1": 0.0, // L1 regularization parameter (controls feature sparsity)
        "lambda_l2": 1.0 // L2 regularization parameter (controls model complexity)
      },
      "train": { "is_scale": true, "length": 1000000, "shifts": [] },
      "predict": { "length": 1440 }
    }
  ],

  "features_horizon": 2880, // Online/stream: Minimum data length for computing features. Take it from feature generator parameters
  "features_last_rows": 5, // Online/stream: Last values which are really needed and have to be computed. All older values are not needed

  // === GENERATE SIGNALS ===

  "signal_sets": [
    {
      // Combine two unsigned scores into one signed score
      "generator": "combine",
      "config": {
        "columns": ["high_0.1_lc", "low_0.1_lc"], // 2 columns: with grow score and fall score
        "names": ["trade_score"], // Output column name: positive values - buy, negative values - sell
        "combine": "difference", // "no_combine" (or empty), "relative", "difference"
        "coefficient": 1.0,
        "constant": 0.0 // Normalize
      }
    },
    {
      // Generate boolean buy-sell column depending on thresholds
      "generator": "threshold_rule",
      "config": {
        "columns": ["trade_score"],
        "names": ["buy_signal_column", "sell_signal_column"], // Output boolean columns
        "parameters": {
          "buy_signal_threshold": 0.05,
          "sell_signal_threshold": -0.05
        }
      }
    }
  ],

  // === NOTIFICATIONS ===

  "score_notification_model": {
    // When and what score notifications to send
    "score_notification": true,

    "score_column_names": ["trade_score"],

    "notify_band_up": true,
    "notify_band_dn": true,
    "positive_bands": [
      { "edge": 0.03, "frequency": null, "sign": "", "text": "" },
      { "edge": 0.04, "frequency": 3, "sign": "ã€‰", "text": "weak" },
      {
        "edge": 0.05,
        "frequency": 2,
        "sign": "ã€‰ã€‰",
        "bold": false,
        "text": "strong"
      },
      {
        "edge": 1.0,
        "frequency": 1,
        "sign": "ã€‰ã€‰ã€‰ðŸ“ˆ",
        "bold": true,
        "text": "BUY ZONE"
      }
    ],
    "negative_bands": [
      { "edge": -0.03, "frequency": null, "sign": "", "text": "" },
      { "edge": -0.04, "frequency": 3, "sign": "ã€ˆ", "text": "weak" },
      {
        "edge": -0.05,
        "frequency": 2,
        "sign": "ã€ˆã€ˆ",
        "bold": false,
        "text": "strong"
      },
      {
        "edge": -1.0,
        "frequency": 1,
        "sign": "ã€ˆã€ˆã€ˆðŸ“‰",
        "bold": true,
        "text": "SELL ZONE"
      }
    ]
  },

  "diagram_notification_model": {
    // Regularly sending historic data with prices, scores and buy-sell trade decisions
    "diagram_notification": true,
    "notification_freq": "1D",

    "score_column_names": "trade_score",
    "score_thresholds": [-0.05, 0.05],

    // 5 minutes aggregation and this number of 5 minute intervals
    "resampling_freq": "5min",
    "nrows": 288
  },

  // === TRADE MODEL ===

  "trade_model": {
    "buy_signal_column": "buy_signal_column",
    "sell_signal_column": "sell_signal_column",

    "trader_simulation": true, // Simulate trading with transaction logging and notifications

    "trader_binance": false // Trade using Binance. Uncomment also parameters below
    //"no_trades_only_data_processing": false,
    //"test_order_before_submit": false,
    //"simulate_order_execution": false,
    //"percentage_used_for_trade": 99.0, // How much should be used in orders
    //"limit_price_adjustment": 0.001, // Limit order price relative to the latest close price
  },

  // === FINDING BEST TRADE PARAMETERS ===

  "train_signal_model": {
    "data_start": 0,
    "data_end": null,

    "direction": "long",
    "topn_to_store": 10,

    "signal_generator": "threshold_rule", // generator in the signal_sets section -> combine | threshold_rule
    "buy_sell_equal": false,
    "grid": {
      "buy_signal_threshold": [0.02, 0.03, 0.04, 0.05, 0.1, 0.15],
      "sell_signal_threshold": [-0.02, -0.03, -0.04, -0.05, -0.1, -0.15]
    }
  },

  "rolling_predict": {
    // int, null or string with date which will be resolved using time_column and removed from source data
    "data_start": "2024-06-02 19:10:00+00:00",
    "data_end": null,

    // One of these 3 parameters can be null and will be computed from the other two
    "prediction_start": null, // First row for starting predictions, for example, "2022-02-01 00:00:00"
    "prediction_size": 10080, // How many predictions, for example, 1 week 7*1440
    "prediction_steps": 4, // How many train-prediction steps

    "use_multiprocessing": false,
    "max_workers": 8
  }
}
